# code generated by chatgpt-4 using below prompt:
#
# write python code to convert a text file to a pdf
# - each line is at most 80 chars, use fixed size font, and set appropriate
#   font size to make sure no wrap happens
# - text are arranged into paragraphs, separated by empty lines
# - put as more paragraphs as possible to a page
# - same paragraph must be in same page, which means you should cacluate the
#   total lines of a paragraph to determine if a new page is required
# - keep the original empty lines in the output

import sys, os
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch


def read_paragraphs(filename):
    with open(filename, 'r') as file:
        content = file.read()
        paragraphs = content.split('\n\n')
        return [p.split('\n') for p in paragraphs]


def convert_text_to_pdf(input_filename, output_filename):
    paragraphs = read_paragraphs(input_filename)
    max_chars_per_line = 80
    font_name = "Courier"  # Fixed-width font
    font_size = 10
    line_height = font_size * 1.2  # 20% spacing
    margin = inch * 0.5
    page_width, page_height = letter

    c = canvas.Canvas(output_filename, pagesize=letter)
    c.setFont(font_name, font_size)

    y = page_height - margin
    for paragraph in paragraphs:
        paragraph_height = len(paragraph) * line_height
        if y - paragraph_height < margin:
            # Start a new page
            c.showPage()
            c.setFont(font_name, font_size)
            y = page_height - margin

        for line in paragraph:
            if not line:  # This is to handle empty lines in paragraphs
                y -= line_height
            else:
                c.drawString(margin, y, line)
                y -= line_height

        # Add an additional empty line after each paragraph if not last line of page
        y -= line_height

        # Check if we need a new page after an empty line
        if y < margin:
            c.showPage()
            c.setFont(font_name, font_size)
            y = page_height - margin

    c.save()


def main():
    if len(sys.argv) != 2:
        print("Usage: python script.py <inputfile.txt>")
        sys.exit(1)

    input_filename = sys.argv[1]
    output_filename = input_filename.replace('.txt', '.pdf')

    # Check if the output file already exists
    if os.path.exists(output_filename):
        print(f"Error: Output file '{output_filename}' already exists.")
        sys.exit(1)

    convert_text_to_pdf(input_filename, output_filename)
    print(f"PDF generated: {output_filename}")


if __name__ == "__main__":
    main()
